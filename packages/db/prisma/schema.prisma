// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int                  @id @default(autoincrement())
  email               String?              @unique
  username            String               @unique
  password            String
  phonenumber         String               @unique
  balance             Balance[]
  age                 Int?
  location            String?
  gender              Gender?
  image               String?
  onboarded Boolean   @default(false)
  onRamptransactions  onRamptransactions[]
  recivcetransactions P2PTransaction[]     @relation("ReceivedTransactions")
  sendtransactions    P2PTransaction[]     @relation("SentTransactions")

  streakCount    Int?      @default(0) // current streak
  lastStreakDate DateTime? // last active day
  longestStreak  Int?      @default(0) // optional, to track best streak
  
}

model Merchant {
  id          Int       @id @default(autoincrement())
  email       String    @unique
  username    String
  password    String
  phonenumber String    @unique
  Auth_type   Auth_type
}

model onRamptransactions {
  id        Int          @id @default(autoincrement())
  status    onRampstatus
  provider  String
  amount    Int
  token     String       @unique
  startTime DateTime
  userId    Int
  user      User         @relation(fields: [userId], references: [id])
}

model Balance {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  amount Int
  locked Int
  user   User @relation(fields: [userId], references: [id])
}

model P2PTransaction {
  id        Int      @id @default(autoincrement())
  senderID  Int
  reciverID Int
  amount    Int
  sender    User     @relation("SentTransactions", fields: [senderID], references: [id])
  receiver  User     @relation("ReceivedTransactions", fields: [reciverID], references: [id])
  createdAt DateTime @default(now())
}

enum Auth_type {
  GOOGLE
  GITHUB
}

enum onRampstatus {
  Processing
  Failed
  Success
}
enum Gender {
  MALE
  FEMALE
  OTHER
}
